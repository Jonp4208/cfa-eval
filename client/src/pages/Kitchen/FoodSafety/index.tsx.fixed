import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useSnackbar } from 'notistack';
import { useAuth } from '@/contexts/AuthContext';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from '@/components/ui/scroll-area';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { 
  Plus, 
  Edit, 
  Trash2, 
  PlayCircle, 
  History, 
  X, 
  Clock, 
  CheckCircle2, 
  AlertTriangle,
  Thermometer,
  ThermometerSun,
  ThermometerSnowflake,
  ClipboardCheck,
  CalendarClock,
  TrendingUp,
  XCircle,
  Settings,
  Coffee,
  Utensils,
  Sun,
  Moon,
  AlarmClock,
  User,
  Pencil,
  Folder,
  Save,
  BarChart3,
  Trash2 as TrashIcon,
  List as ClipboardList,
  PieChart,
  AlertOctagon,
  Info
} from 'lucide-react';
import { kitchenService, DailyChecklistItemWithCompletions as BaseDailyChecklistItemWithCompletions, DailyChecklistCompletion } from '@/services/kitchenService';
import { 
  FoodSafetyChecklist, 
  ChecklistFrequency, 
  FoodSafetyChecklistCompletion, 
  WeekDay, 
  ValidationCriteria, 
  CheckType,
  ChecklistItemCompletion,
  TimeFrame
} from '@/types/kitchen';
import { cn } from "@/lib/utils";
import PageHeader from '@/components/PageHeader';
import ChecklistDialog from './components/ChecklistDialog'

interface TempRange {
  min: number
  max: number
  warning: number
  type?: 'product'
}

// Standard CFA temperature ranges
const CFA_TEMP_RANGES: Record<string, TempRange> = {
  // Equipment Temperatures
  walk_in_cooler: { min: 35, max: 41, warning: 2 },
  walk_in_freezer: { min: -10, max: 0, warning: 5 },
  prep_area_cooler: { min: 35, max: 41, warning: 2 },
  hot_holding: { min: 135, max: 165, warning: 5 },
  cooking_line: { min: 35, max: 41, warning: 2 },
  // Product Temperatures
  filet_cook: { min: 165, max: 175, warning: 5, type: 'product' },
  filet_hold: { min: 140, max: 145, warning: 3, type: 'product' },
  nugget_cook: { min: 165, max: 175, warning: 5, type: 'product' },
  nugget_hold: { min: 140, max: 145, warning: 3, type: 'product' },
  strip_cook: { min: 165, max: 175, warning: 5, type: 'product' },
  strip_hold: { min: 140, max: 145, warning: 3, type: 'product' },
  grilled_filet_cook: { min: 165, max: 175, warning: 5, type: 'product' },
  grilled_filet_hold: { min: 140, max: 145, warning: 3, type: 'product' },
  grilled_nugget_cook: { min: 165, max: 175, warning: 5, type: 'product' }
};

// Standard restaurant checklist categories
const CHECKLIST_CATEGORIES = [
  { id: 'opening', label: 'Opening Procedures', icon: 'sunrise' },
  { id: 'temp_monitoring', label: 'Temperature Monitoring', icon: 'thermometer' },
  { id: 'food_prep', label: 'Food Preparation', icon: 'utensils' },
  { id: 'equipment', label: 'Equipment Checks', icon: 'tool' },
  { id: 'sanitation', label: 'Sanitation & Cleaning', icon: 'spray' },
  { id: 'closing', label: 'Closing Procedures', icon: 'moon' }
]

interface DailyChecklistItem {
  id: string
  name: string
  frequency?: 'once' | 'multiple'
  requiredCompletions?: number
  timeframe?: TimeFrame
}

interface DailyChecklistItems {
  [key: string]: DailyChecklistItem[]
  items: DailyChecklistItem[]
}

interface CompletedBy {
  name: string
  [key: string]: any
}

interface ReviewedBy {
  name: string
  [key: string]: any
}

interface DailyCheckCompletion {
  completed: boolean
  completedBy?: string
  completedAt?: string
}

// Update the TabType to exclude '30min' and 'hourly'
type TabType = 'morning' | 'lunch' | 'dinner'

// Extend the base interface to include category
interface DailyChecklistItemWithCompletions extends BaseDailyChecklistItemWithCompletions {
  category?: string;
}

const FoodSafety: React.FC = () => {
  const navigate = useNavigate();
  const { enqueueSnackbar } = useSnackbar();
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [checklists, setChecklists] = useState<FoodSafetyChecklist[]>([]);
  const [completions, setCompletions] = useState<FoodSafetyChecklistCompletion[]>([]);
  const [view, setView] = useState<'active' | 'upcoming' | 'completed'>('active');
  const [openDialog, setOpenDialog] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [editingChecklist, setEditingChecklist] = useState<FoodSafetyChecklist | null>(null);
  const [temperatures, setTemperatures] = useState<Record<string, { value: number | null; timestamp: string | null }>>({});
  const [dailyChecks, setDailyChecks] = useState<Record<string, DailyCheckCompletion>>({});
  const [tempView, setTempView] = useState<'equipment' | 'product'>('equipment');
  const [editListsDialog, setEditListsDialog] = useState(false);
  const [editingSection, setEditingSection] = useState<'temperatures' | 'checklist' | null>(null);
  const [editedTempRanges, setEditedTempRanges] = useState<Record<string, TempRange>>(CFA_TEMP_RANGES);
  const [tempRanges, setTempRanges] = useState<Array<{id: string, name: string, minTemp: number|string, maxTemp: number|string}>>([]);
  const [editedDailyItems, setEditedDailyItems] = useState<DailyChecklistItems>({
    items: []
  });
  const [recordTempDialog, setRecordTempDialog] = useState(false)
  const [recordTempView, setRecordTempView] = useState<'equipment' | 'product'>('equipment')
  const [newTemperatures, setNewTemperatures] = useState<Record<string, { value: number | null; timestamp: string | null }>>(temperatures)
  const [editListsTimeframeTab, setEditListsTimeframeTab] = useState<TimeFrame>('morning');
  
  // New state variables for daily checklist
  const [dailyChecklistItems, setDailyChecklistItems] = useState<Record<string, DailyChecklistItemWithCompletions[]>>({});
  const [activeTab, setActiveTab] = useState<TabType>('morning');
  const [completeItemDialog, setCompleteItemDialog] = useState(false);
  const [selectedItem, setSelectedItem] = useState<{
    category: string
    item: DailyChecklistItemWithCompletions
  } | null>(null);
  const [formData, setFormData] = useState({
    value: '',
    notes: '',
    status: 'pass' // Add status field with default value of 'pass'
  });
  
  // Add these new state variables for improved dialogs
  const [newItemDialog, setNewItemDialog] = useState(false);
  const [newCategoryDialog, setNewCategoryDialog] = useState(false);
  const [newItemCategory, setNewItemCategory] = useState('');
  const [newItemName, setNewItemName] = useState('New Item');
  const [newCategoryName, setNewCategoryName] = useState('');
  const [showEditListDialog, setShowEditListDialog] = useState(false);
  const [editedDailyCategories, setEditedDailyCategories] = useState({});
  const [editedDailyItem, setEditedDailyItem] = useState({
    id: '',
    name: '',
    timeframe: 'morning',
    frequency: 'once',
    requiredCompletions: 1,
  });
  const [showAddDailyItemDialog, setShowAddDailyItemDialog] = useState(false);
  const [showAddTempRangeDialog, setShowAddTempRangeDialog] = useState(false);
  const [editedTempRange, setEditedTempRange] = useState({
    id: '',
    name: '',
    minTemp: '',
    maxTemp: '',
  });
  const [showTempRecordDialog, setShowTempRecordDialog] = useState(false);
  const [selectedRange, setSelectedRange] = useState<any>(null);
  const [tempValue, setTempValue] = useState('');

  // State for managing form data and UI state
  const [open, setOpen] = useState<boolean>(false);
  const [activeSection, setActiveSection] = useState<string>('dailyChecklist');
  const [activeTimeframe, setActiveTimeframe] = useState<TimeFrame>('morning');

  // Update useEffect to only call loadData with a refresh interval
  useEffect(() => {
    loadData();
    
    // Set up a refresh interval (every 5 minutes)
    const refreshInterval = setInterval(() => {
      loadData();
    }, 5 * 60 * 1000);
    
    return () => {
      clearInterval(refreshInterval);
    };
  }, []);

  useEffect(() => {
    // Auto-select the most relevant tab based on current time
    const currentHour = new Date().getHours()
    
    if (currentHour >= 5 && currentHour < 11) {
      setActiveTab('morning')
    } else if (currentHour >= 11 && currentHour < 16) {
      setActiveTab('lunch')
    } else {
      setActiveTab('dinner')
    }
  }, [])

  const loadData = async () => {
    try {
      setLoading(true);
      
      // Directly fetch the daily checklist items with completions from the backend
      const dailyItems = await kitchenService.getDailyChecklistItems();
      console.log('Daily items from backend:', dailyItems);
      
      // Set the daily checklist items directly from the backend response
      setDailyChecklistItems(dailyItems);
      
      // Also fetch other data
      const [checklistsData, completionsData, configData, latestTemps] = await Promise.all([
        kitchenService.getAllChecklists(),
        kitchenService.getChecklistCompletions('all'),
        kitchenService.getFoodSafetyConfig(),
        kitchenService.getLatestTemperatures()
      ]);
      
      setChecklists(checklistsData);
      setCompletions(completionsData);
      
      // Set the edited daily items for the configuration
      if (configData && configData.dailyChecklistItems) {
        setEditedDailyItems(configData.dailyChecklistItems as DailyChecklistItems);
      } else {
        setEditedDailyItems({ items: [] });
      }
      
      // Set the temperature ranges
      if (configData && configData.temperatureRanges) {
        const newTempRanges = configData.temperatureRanges;
        setEditedTempRanges(newTempRanges);
        
        // Convert the temperature ranges object to an array for the UI
        const tempRangesArray = Object.entries(newTempRanges).map(([id, range]) => ({
          id,
          name: id.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
          minTemp: range.min,
          maxTemp: range.max
        }));
        setTempRanges(tempRangesArray);
        
        Object.assign(CFA_TEMP_RANGES, newTempRanges);
      } else {
        // If no config data, create default temp ranges from CFA_TEMP_RANGES
        const defaultTempRanges = Object.entries(CFA_TEMP_RANGES).map(([id, range]) => ({
          id,
          name: id.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
          minTemp: range.min,
          maxTemp: range.max
        }));
        setTempRanges(defaultTempRanges);
      }

      // Set the latest temperatures
      if (latestTemps) {
        const formattedTemps: Record<string, { value: number | null; timestamp: string | null }> = {};
        
        Object.entries(latestTemps).forEach(([location, data]) => {
          formattedTemps[location] = {
            value: data.value,
            timestamp: data.timestamp
          };
        });
        
        setTemperatures(formattedTemps);
        setNewTemperatures(formattedTemps);
      }
    } catch (error) {
      console.error('Error loading data:', error);
      enqueueSnackbar('Failed to load food safety data', { variant: 'error' });
    } finally {
      setLoading(false);
    }
  };

  const getCompletionRate = () => {
    // Count total required items across all categories
    let totalItems = 0;
    let completedItems = 0;
    
    // Iterate through all categories and their items
    Object.values(dailyChecklistItems).forEach(categoryItems => {
      categoryItems.forEach(item => {
        totalItems++;
        if (item.isCompleted) {
          completedItems++;
        }
      });
    });
    
    return totalItems ? Math.round((completedItems / totalItems) * 100) : 0;
  };

  const getCriticalTasks = () => {
    // Define critical categories or items based on food safety standards
    const criticalCategories = ['sanitizer', 'hygiene', 'food_prep'];
    
    // Count critical items
    let criticalCount = 0;
    
    // Iterate through all categories and count items in critical categories
    Object.entries(dailyChecklistItems).forEach(([category, items]) => {
      if (criticalCategories.includes(category)) {
        criticalCount += items.length;
      }
    });
    
    return criticalCount;
  };

  const getOverdueCount = () => {
    // Count items that should be completed but aren't
    let overdueCount = 0;
    
    // Get current time to determine which timeframes should be completed
    const now = new Date();
    const currentHour = now.getHours();
    
    // Define which timeframes should be completed based on current time
    const requiredTimeframes = [];
    
    if (currentHour >= 11) { // After 11 AM
      requiredTimeframes.push('morning');
    }
    
    if (currentHour >= 15) { // After 3 PM
      requiredTimeframes.push('lunch');
    }
    
    if (currentHour >= 20) { // After 8 PM
      requiredTimeframes.push('dinner');
    }
    
    // Count incomplete items that should be completed by now
    Object.values(dailyChecklistItems).forEach(categoryItems => {
      categoryItems.forEach(item => {
        if (
          requiredTimeframes.includes(item.timeframe) && 
          !item.isCompleted
        ) {
          overdueCount++;
        }
      });
    });
    
    return overdueCount;
  };

  const handleCreateChecklist = async (data: any) => {
    try {
      await kitchenService.createChecklist({
        ...data,
        department: 'Kitchen'
      })
      enqueueSnackbar('Checklist created successfully', { variant: 'success' })
      loadData()
    } catch (error) {
      console.error('Error creating checklist:', error)
      enqueueSnackbar('Failed to create checklist', { variant: 'error' })
    }
  }

  const handleEditChecklist = async (data: any) => {
    try {
      await kitchenService.updateChecklist(editingChecklist!._id!, {
        ...data,
        department: 'Kitchen'
      })
      enqueueSnackbar('Checklist updated successfully', { variant: 'success' })
      loadData()
    } catch (error) {
      console.error('Error updating checklist:', error)
      enqueueSnackbar('Failed to update checklist', { variant: 'error' })
    }
  }

  const handleDeleteChecklist = async (id: string) => {
    if (window.confirm('Are you sure you want to delete this checklist?')) {
      try {
        await kitchenService.deleteChecklist(id)
        enqueueSnackbar('Checklist deleted successfully', { variant: 'success' })
        loadData()
      } catch (error) {
        console.error('Error deleting checklist:', error)
        enqueueSnackbar('Failed to delete checklist', { variant: 'error' })
      }
    }
  }

  const getTemperatureStatus = (location: string, temp: { value: number | null; timestamp: string | null } | undefined) => {
    // Return 'pending' if temp is undefined or null, or if value is null
    if (!temp || temp.value === null) return 'pending';
    
    const range = CFA_TEMP_RANGES[location as keyof typeof CFA_TEMP_RANGES];
    if (!range) return 'pending';
    
    if (temp.value < range.min || temp.value > range.max) return 'fail';
    if (temp.value <= range.min + range.warning || temp.value >= range.max - range.warning) return 'warning';
    return 'pass';
  };

  const handleSaveEdits = async () => {
    try {
      if (editingSection === 'temperatures') {
        await kitchenService.updateFoodSafetyConfig({
          temperatureRanges: editedTempRanges,
          dailyChecklistItems: editedDailyItems
        });
        
        // Convert the temperature ranges object to an array for the UI
        const tempRangesArray = Object.entries(editedTempRanges).map(([id, range]) => ({
          id,
          name: id.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
          minTemp: range.min,
          maxTemp: range.max
        }));
        setTempRanges(tempRangesArray);
        
        // Reset current temperatures to force re-validation
        setTemperatures({});
      } else if (editingSection === 'checklist') {
        await kitchenService.updateFoodSafetyConfig({
          temperatureRanges: CFA_TEMP_RANGES,
          dailyChecklistItems: editedDailyItems
        });
        // Reset current checks
        setDailyChecks({});
      }
      
      setEditListsDialog(false);
      setEditingSection(null);
      enqueueSnackbar('Changes saved successfully', { variant: 'success' });
      
      // Reload data to get the latest configuration
      loadData();
    } catch (error) {
      console.error('Error saving changes:', error);
      enqueueSnackbar('Failed to save changes', { variant: 'error' });
    }
  };

  const handleRecordTemperature = (location: string, value: string) => {
    const temp = value === '' ? null : Number(value)
    setNewTemperatures(prev => ({
      ...prev,
      [location]: {
        value: temp,
        timestamp: temp !== null ? new Date().toISOString() : null
      }
    }))
  }

  const handleSaveTemperatures = async () => {
    try {
      // Format temperatures for the API
      const tempsToSave = Object.entries(newTemperatures)
        .filter(([_, data]) => data.value !== null)
        .map(([location, data]) => ({
          location,
          value: data.value as number,
          type: CFA_TEMP_RANGES[location]?.type || 'equipment'
        }));
      
      if (tempsToSave.length === 0) {
        enqueueSnackbar('No temperatures to save', { variant: 'warning' });
        return;
      }
      
      // Save temperatures to the backend
      await kitchenService.recordMultipleTemperatures(tempsToSave);
      
      // Update local state
      setTemperatures(newTemperatures);
      setRecordTempDialog(false);
      enqueueSnackbar('Temperatures recorded successfully', { variant: 'success' });
      
      // Reload data to get the latest temperatures
      loadData();
    } catch (error) {
      console.error('Error saving temperatures:', error);
      enqueueSnackbar('Failed to save temperatures', { variant: 'error' });
    }
  }

  const handleDailyCheckToggle = (itemId: string) => {
    setDailyChecks(prev => ({
      ...prev,
      [itemId]: prev[itemId]?.completed 
        ? { completed: false }  // If it was completed, just uncomplete it
        : { 
            completed: true,
            completedBy: user?.name || 'Unknown User',
            completedAt: new Date().toISOString()
          }
    }))
  }

  // New functions for daily checklist
  const handleOpenCompleteDialog = (category: string, item: DailyChecklistItemWithCompletions) => {
    setSelectedItem({ category, item });
    setFormData({
      value: '',
      notes: '',
      status: 'pass' // Set default status to 'pass'
    });
    setCompleteItemDialog(true);
  };

  const handleCloseCompleteDialog = () => {
    setCompleteItemDialog(false);
    setSelectedItem(null);
  };

  const handleCompleteItem = async () => {
    if (!selectedItem) return;

    try {
      const { category, item } = selectedItem;
      console.log('Completing item:', item);
      console.log('Category:', category);
      console.log('Form data:', formData);
      
      const response = await kitchenService.completeDailyChecklistItem(category, item.id, formData);
      console.log('Completion response:', response);
      
      // Manually update the state to reflect the completion
      setDailyChecklistItems(prev => {
        const newState = { ...prev };
        if (newState[category]) {
          newState[category] = newState[category].map(i => {
            if (i.id === item.id) {
              return {
                ...i,
                isCompleted: true,
                completedCount: i.completedCount + 1,
                completions: [
                  {
                    id: response.id,
                    completedBy: response.completedBy,
                    completedAt: response.completedAt,
                    value: response.value,
                    notes: response.notes,
                    status: response.status
                  },
                  ...(i.completions || [])
                ]
              };
            }
            return i;
          });
        }
        return newState;
      });
      
      enqueueSnackbar('Item completed successfully', { variant: 'success' });
      handleCloseCompleteDialog();
    } catch (error) {
      console.error('Error completing item:', error);
      enqueueSnackbar('Failed to complete item', { variant: 'error' });
    }
  };

  const handleDeleteCompletion = async (completionId: string) => {
    if (!window.confirm('Are you sure you want to delete this completion?')) return;

    try {
      await kitchenService.deleteDailyChecklistCompletion(completionId);
      
      // Manually update the state to reflect the deletion
      setDailyChecklistItems(prev => {
        const newState = { ...prev };
        
        // Loop through all categories and items to find and update the one with this completion
        Object.keys(newState).forEach(category => {
          if (Array.isArray(newState[category])) {
            newState[category] = newState[category].map(item => {
              if (item.completions && item.completions.length > 0) {
                // Filter out the deleted completion
                const updatedCompletions = item.completions.filter(c => c.id !== completionId);
                
                // Update the item's completion status
                return {
                  ...item,
                  completions: updatedCompletions,
                  completedCount: updatedCompletions.length,
                  isCompleted: item.frequency === 'once' 
                    ? updatedCompletions.length > 0 
                    : updatedCompletions.length >= (item.requiredCompletions || 1)
                };
              }
              return item;
            });
          }
        });
        
        return newState;
      });
      
      // Remove localStorage code
      
      enqueueSnackbar('Completion deleted successfully', { variant: 'success' });
    } catch (error) {
      console.error('Error deleting completion:', error);
      enqueueSnackbar('Failed to delete completion', { variant: 'error' });
    }
  };

  const formatTime = (dateString: string) => {
    const date = new Date(dateString);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    
    // Format the time part
    const timeString = date.toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
      hour12: true
    });
    
    // Check if the date is today, yesterday, or another day
    if (date.toDateString() === today.toDateString()) {
      return `Today at ${timeString}`;
    } else if (date.toDateString() === yesterday.toDateString()) {
      return `Yesterday at ${timeString}`;
    } else {
      // Format the date for other days
      const dateString = date.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric'
      });
      return `${dateString} at ${timeString}`;
    }
  };

  const getTabIcon = (tab: TabType) => {
    switch (tab) {
      case 'morning':
        return <Coffee className="h-4 w-4 mr-2" />
      case 'lunch':
        return <Utensils className="h-4 w-4 mr-2" />
      case 'dinner':
        return <Utensils className="h-4 w-4 mr-2" />
      default:
        return null
    }
  }

  const getTimeframeLabel = (timeframe: TimeFrame) => {
    switch (timeframe) {
      case 'morning':
        return 'Morning (5am-11am)'
      case 'lunch':
        return 'Lunch (11am-4pm)'
      case 'dinner':
        return 'Dinner (4pm-Close)'
      case '30min':
        return '30-Minute Checks'
      case 'hourly':
        return 'Hourly Checks'
      default:
        return timeframe
    }
  }

  const getItemsForTab = (tab: TabType) => {
    let allItems: DailyChecklistItemWithCompletions[] = []
    
    Object.entries(dailyChecklistItems).forEach(([category, items]) => {
      // Add category information to each item
      const itemsWithCategory = items.map(item => ({
        ...item,
        category // Add the original category key for API calls
      }))
      allItems = [...allItems, ...itemsWithCategory]
    })
    
    // For morning tab, show morning items plus any 30min/hourly items
    if (tab === 'morning') {
      return allItems.filter(item => 
        item.timeframe === 'morning' || 
        item.timeframe === '30min' || 
        item.timeframe === 'hourly'
      )
    }
    
    // For lunch tab, show lunch items plus any 30min/hourly items
    if (tab === 'lunch') {
      return allItems.filter(item => 
        item.timeframe === 'lunch' || 
        item.timeframe === '30min' || 
        item.timeframe === 'hourly'
      )
    }
    
    // For dinner tab, show dinner items plus any 30min/hourly items
    if (tab === 'dinner') {
      return allItems.filter(item => 
        item.timeframe === 'dinner' || 
        item.timeframe === '30min' || 
        item.timeframe === 'hourly'
      )
    }
    
    return []
  }

  const getIncompleteCount = (tab: TabType) => {
    const items = getItemsForTab(tab)
    return items.filter(item => !item.isCompleted).length
  }

  const handleSaveConfig = async () => {
    try {
      // Make sure we have an items array
      const configToSave = { ...editedDailyItems };
      if (!configToSave.items) {
        configToSave.items = [];
      }
      
      // Save to backend
      await kitchenService.updateFoodSafetyConfig({
        temperatureRanges: editedTempRanges,
        dailyChecklistItems: configToSave
      });
      
      // Update local state with the edited items
      // Convert the DailyChecklistItems to Record<string, DailyChecklistItemWithCompletions[]>
      const updatedItems: Record<string, DailyChecklistItemWithCompletions[]> = {};
      
      // Copy all categories from editedDailyItems
      Object.entries(configToSave).forEach(([category, items]) => {
        if (Array.isArray(items)) {
          // Add the category with its items
          updatedItems[category] = items as DailyChecklistItemWithCompletions[];
        }
      });
      
      // Make sure we have an 'items' array
      if (!updatedItems.items) {
        updatedItems.items = [];
      }
      
      // Update the state directly instead of reloading data
      setDailyChecklistItems(updatedItems);
      
      enqueueSnackbar('Changes saved successfully', { variant: 'success' });
      
      // Don't reload data after saving to prevent items from disappearing
      // loadData();
    } catch (error) {
      console.error('Error saving configuration:', error);
      enqueueSnackbar('Failed to save configuration', { variant: 'error' });
    }
  };

  // Initialize editedDailyItems with 'items' array if it doesn't exist
  useEffect(() => {
    if (!editedDailyItems['items']) {
      setEditedDailyItems(prev => ({
        ...prev,
        items: []
      }));
    }
  }, [editedDailyItems]);

  const handleEditDailyItem = (category: string, item: DailyChecklistItem) => {
    setEditedDailyItem({ ...item });
    setShowAddDailyItemDialog(true);
  };

  const handleDeleteDailyItem = (category: string, itemId: string) => {
    setDailyChecklistItems(prev => {
      const newItems = { ...prev };
      newItems[category] = newItems[category].filter(i => i.id !== itemId);
      return newItems;
    });
  };

  const handleAddCategory = () => {
    setEditedDailyCategories(prev => ({
      ...prev,
      [newCategoryName]: []
    }));
    setNewCategoryName('');
    setNewCategoryDialog(false);
    handleSaveConfig();
  };

  const handleDeleteCategory = (category: string) => {
    setEditedDailyCategories(prev => {
      const newCategories = { ...prev };
      delete newCategories[category];
      return newCategories;
    });
    handleSaveConfig();
  };

  const handleSaveCategories = () => {
    setEditedDailyCategories(prev => {
      const newCategories = { ...prev };
      newCategories[newCategoryName] = Object.values(editedDailyCategories).flat();
      return newCategories;
    });
    setNewCategoryName('');
    setNewCategoryDialog(false);
    handleSaveConfig();
  };

  const handleRecordTemperatureForRange = (rangeId) => {
    const range = tempRanges.find(r => r.id === rangeId);
    if (range) {
      setSelectedRange(range);
      
      // Pre-fill with existing value if available
      const existingTemp = temperatures[rangeId.toLowerCase()];
      setTempValue(existingTemp?.value ? existingTemp.value.toString() : '');
      
      setShowTempRecordDialog(true);
    }
  };

  const handleSaveTemperature = () => {
    if (!selectedRange) return;
    
    // Validate the temperature
    const value = Number(tempValue);
    if (isNaN(value)) {
      enqueueSnackbar('Please enter a valid temperature', { variant: 'error' });
      return;
    }
    
    // Update temperatures state
    const rangeId = selectedRange.id.toLowerCase();
    setTemperatures(prev => ({
      ...prev,
      [rangeId]: {
        value,
        timestamp: new Date().toISOString()
      }
    }));
    
    // Save to backend
    try {
      kitchenService.recordTemperature(rangeId, value);
      enqueueSnackbar('Temperature recorded successfully', { variant: 'success' });
      setShowTempRecordDialog(false);
    } catch (error) {
      console.error('Error recording temperature:', error);
      enqueueSnackbar('Failed to record temperature', { variant: 'error' });
    }
  };

  const handleSaveTempRange = async () => {
    try {
      // Validate inputs
      if (
        !editedTempRange.name || 
        !editedTempRange.minTemp || 
        !editedTempRange.maxTemp || 
        Number(editedTempRange.minTemp) >= Number(editedTempRange.maxTemp)
      ) {
        enqueueSnackbar('Please fill out all fields correctly', { variant: 'error' });
        return;
      }
      
      // Prepare range data
      const rangeData = {
        id: editedTempRange.id || `range_${Date.now()}`,
        name: editedTempRange.name,
        minTemp: Number(editedTempRange.minTemp),
        maxTemp: Number(editedTempRange.maxTemp)
      };
      
      if (editedTempRange.id) {
        // Update existing range
        await kitchenService.updateTempRange(rangeData);
        
        // Update local state for UI display
        setTempRanges(prevRanges => 
          prevRanges.map(r => r.id === rangeData.id ? rangeData : r)
        );
        
        // Also update the editedTempRanges for backend sync
                      setEditedTempRanges(prev => ({
                        ...prev,
          [rangeData.id]: {
            min: Number(rangeData.minTemp),
            max: Number(rangeData.maxTemp),
            warning: 2 // Default warning value
          }
        }));
        
        enqueueSnackbar('Temperature range updated successfully', { variant: 'success' });
      } else {
        // Add new range
        await kitchenService.addTempRange(rangeData);
        
        // Update local state for UI display
        setTempRanges(prevRanges => [...prevRanges, rangeData]);
        
        // Also update the editedTempRanges for backend sync
        setEditedTempRanges(prev => ({
          ...prev,
          [rangeData.id]: {
            min: Number(rangeData.minTemp),
            max: Number(rangeData.maxTemp),
            warning: 2 // Default warning value
          }
        }));
        
        enqueueSnackbar('Temperature range added successfully', { variant: 'success' });
      }
      
      // Reset form and close dialog
      setEditedTempRange({
        id: '',
        name: '',
        minTemp: '',
        maxTemp: ''
      });
      
      setShowAddTempRangeDialog(false);
    } catch (error) {
      console.error('Error saving temperature range:', error);
      enqueueSnackbar('Failed to save temperature range', { variant: 'error' });
    }
  };

  const handleEditTempRange = (range) => {
    // Set the edited range data
    setEditedTempRange({
      id: range.id,
      name: range.name,
      minTemp: range.minTemp.toString(),
      maxTemp: range.maxTemp.toString()
    });
    
    // Open the dialog
    setShowAddTempRangeDialog(true);
  };

  const handleDeleteTempRange = async (rangeId) => {
    // Confirm before deleting
    if (!window.confirm('Are you sure you want to delete this temperature range?')) {
      return;
    }
    
    try {
      // Delete from backend
      await kitchenService.deleteTempRange(rangeId);
      
      // Update tempRanges local state for UI
      setTempRanges(prevRanges => prevRanges.filter(r => r.id !== rangeId));
      
      // Also update the editedTempRanges state for backend sync
      setEditedTempRanges(prev => {
        const newRanges = { ...prev };
        delete newRanges[rangeId];
        return newRanges;
      });
      
      // Also remove any associated temperature readings
      setTemperatures(prevTemps => {
        const newTemps = { ...prevTemps };
        delete newTemps[rangeId.toLowerCase()];
        return newTemps;
      });
      
      enqueueSnackbar('Temperature range deleted successfully', { variant: 'success' });
    } catch (error) {
      console.error('Error deleting temperature range:', error);
      enqueueSnackbar('Failed to delete temperature range', { variant: 'error' });
    }
  };

  const handleSaveItem = () => {
    // Create a new item object from the form data
    const itemToSave = {
      ...editedDailyItem,
      id: editedDailyItem.id || `item_${Date.now()}`,
    };

    // If we're adding to a new category, create it
    const targetCategory = newItemCategory === 'new' ? newCategoryName : newItemCategory;
    
    setDailyChecklistItems(prev => {
      const newItems = { ...prev };
      
      // If this is a new category, initialize it
      if (newItemCategory === 'new' && !newItems[targetCategory]) {
        newItems[targetCategory] = [];
      }
      
      // If we're editing an existing item
      if (editedDailyItem.id) {
        // Find and update the item across all categories
        Object.keys(newItems).forEach(category => {
          // If the category is changing, remove from old and add to new
          if (category === targetCategory) {
            // Find the item in this category if it exists
            const itemIndex = newItems[category].findIndex(item => item.id === editedDailyItem.id);
            
            if (itemIndex >= 0) {
              // Update in current category
              newItems[category][itemIndex] = itemToSave;
            } else {
              // Add to new category
              newItems[category].push(itemToSave);
            }
          } else {
            // Remove from other categories if it was moved
            newItems[category] = newItems[category].filter(item => item.id !== editedDailyItem.id);
          }
        });
      } else {
        // Add new item to the category
        newItems[targetCategory].push(itemToSave);
      }
      
      return newItems;
    });
    
    // Reset form state
    setEditedDailyItem({
      id: '',
      name: '',
      timeframe: 'morning',
      frequency: 'once',
      requiredCompletions: 1,
      completions: []
    });
    setNewItemCategory('');
    setNewCategoryName('');
    setShowAddDailyItemDialog(false);
    
    // Save changes to the backend
    handleSaveConfig();
  };

  // Helper function to get items by timeframe
  const getItemsByTimeframe = (timeframe: TimeFrame) => {
    const result: Record<string, any[]> = {};
    
    Object.keys(dailyChecklistItems).forEach(category => {
      const filteredItems = dailyChecklistItems[category].filter(item => 
        item.timeframe === timeframe
      );
      
      if (filteredItems.length > 0) {
        result[category] = filteredItems;
      }
    });
    
    return result;
  };

  // Helper function to count incomplete items by timeframe
  const getIncompleteCountByTimeframe = (timeframe: TimeFrame) => {
    let count = 0;
    
    Object.keys(dailyChecklistItems).forEach(category => {
      dailyChecklistItems[category].forEach(item => {
        if (item.timeframe === timeframe) {
          const completionsToday = item.completions?.filter(
            c => new Date(c.completedAt).toDateString() === new Date().toDateString()
          ).length || 0;
          
          if (item.frequency === 'multiple') {
            if (completionsToday < item.requiredCompletions) {
              count++;
            }
          } else if (completionsToday === 0) {
            count++;
          }
        }
      });
    });
    
    return count;
  };

  const handleAddDailyItemClick = () => {
    setEditedDailyItem({
      id: '',
      name: '',
      timeframe: activeTimeframe, // Use current active timeframe
      frequency: 'once',
      requiredCompletions: 1,
      completions: []
    });
    setNewItemCategory(Object.keys(dailyChecklistItems)[0] || '');
    setShowAddDailyItemDialog(true);
  };

  return (
    <div className="min-h-[calc(100vh-80px)] bg-[#F9F9F9] pb-16">
      <div className="space-y-6 px-4 sm:px-6 md:px-8 pt-6 pb-6 max-w-6xl mx-auto">
        {/* Summary Statistics Cards */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card className="bg-white rounded-xl shadow-sm border-0 overflow-hidden">
            <CardContent className="p-0">
              <div className="flex items-center">
                <div className="p-4 sm:p-5 flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <CheckCircle2 className="h-4 w-4 text-green-500" />
                    <h3 className="text-sm font-medium text-[#27251F]/80">Completion Rate</h3>
                </div>
                  <div className="flex items-baseline gap-1">
                    <p className="text-2xl font-bold text-[#27251F]">{getCompletionRate()}%</p>
                    <p className="text-xs text-[#27251F]/60">daily items</p>
                            </div>
                          </div>
                <div className="h-full bg-gradient-to-br from-green-50 to-green-100 p-4 sm:p-5 flex items-center justify-center">
                  <div className="w-12 h-12 flex items-center justify-center rounded-full bg-white shadow-sm">
                    <PieChart className="h-6 w-6 text-green-500" />
                            </div>
                            </div>
                            </div>
            </CardContent>
          </Card>

          <Card className="bg-white rounded-xl shadow-sm border-0 overflow-hidden">
            <CardContent className="p-0">
              <div className="flex items-center">
                <div className="p-4 sm:p-5 flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <AlertTriangle className="h-4 w-4 text-amber-500" />
                    <h3 className="text-sm font-medium text-[#27251F]/80">Critical Tasks</h3>
                          </div>
                  <div className="flex items-baseline gap-1">
                    <p className="text-2xl font-bold text-[#27251F]">{getCriticalTasks()}</p>
                    <p className="text-xs text-[#27251F]/60">pending</p>
                        </div>
                  </div>
                <div className="h-full bg-gradient-to-br from-amber-50 to-amber-100 p-4 sm:p-5 flex items-center justify-center">
                  <div className="w-12 h-12 flex items-center justify-center rounded-full bg-white shadow-sm">
                    <AlertOctagon className="h-6 w-6 text-amber-500" />
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-white rounded-xl shadow-sm border-0 overflow-hidden">
            <CardContent className="p-0">
              <div className="flex items-center">
                <div className="p-4 sm:p-5 flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <ThermometerSun className="h-4 w-4 text-blue-500" />
                    <h3 className="text-sm font-medium text-[#27251F]/80">Temperature Checks</h3>
                </div>
                  <div className="flex items-baseline gap-1">
                    <p className="text-2xl font-bold text-[#27251F]">{Object.keys(temperatures).filter(k => temperatures[k]?.value).length}</p>
                    <p className="text-xs text-[#27251F]/60">today</p>
                            </div>
                          </div>
                <div className="h-full bg-gradient-to-br from-blue-50 to-blue-100 p-4 sm:p-5 flex items-center justify-center">
                  <div className="w-12 h-12 flex items-center justify-center rounded-full bg-white shadow-sm">
                    <Thermometer className="h-6 w-6 text-blue-500" />
                            </div>
                            </div>
                            </div>
            </CardContent>
          </Card>

          <Card className="bg-white rounded-xl shadow-sm border-0 overflow-hidden">
            <CardContent className="p-0">
              <div className="flex items-center">
                <div className="p-4 sm:p-5 flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <CalendarClock className="h-4 w-4 text-red-500" />
                    <h3 className="text-sm font-medium text-[#27251F]/80">Overdue Tasks</h3>
                          </div>
                  <div className="flex items-baseline gap-1">
                    <p className="text-2xl font-bold text-[#27251F]">{getOverdueCount()}</p>
                    <p className="text-xs text-[#27251F]/60">need attention</p>
                        </div>
                  </div>
                <div className="h-full bg-gradient-to-br from-red-50 to-red-100 p-4 sm:p-5 flex items-center justify-center">
                  <div className="w-12 h-12 flex items-center justify-center rounded-full bg-white shadow-sm">
                    <Clock className="h-6 w-6 text-red-500" />
                </div>
              </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Action buttons - moved from the header */}
        <div className="flex flex-wrap items-center gap-2">
                    <Button
            onClick={() => navigate('history')}
            className="bg-white hover:bg-white/90 text-[#27251F] border border-gray-200 shadow-sm h-10"
          >
            <History className="h-4 w-4 mr-2 text-[#27251F]/70" />
            History
                    </Button>
                    <Button
            onClick={() => navigate('/kitchen/food-safety/analytics')}
            className="bg-white hover:bg-white/90 text-[#27251F] border border-gray-200 shadow-sm h-10"
          >
            <BarChart3 className="h-4 w-4 mr-2 text-[#27251F]/70" />
            Analytics
          </Button>
          <Button
            onClick={() => setShowEditListDialog(true)}
            className="bg-white hover:bg-white/90 text-[#27251F] border border-gray-200 shadow-sm h-10"
          >
            <Pencil className="h-4 w-4 mr-2 text-[#27251F]/70" />
            Edit Lists
          </Button>
          <Button
            onClick={() => navigate('daily-checklist')}
            className="bg-gradient-to-r from-[#E51636] to-[#C41230] hover:brightness-105 text-white shadow-md transition-all duration-200 active:translate-y-0.5 h-10"
          >
            <ClipboardCheck className="h-4 w-4 mr-2" />
            Daily Checklist
                    </Button>
                </div>

        {/* Main Content */}
        <Tabs defaultValue="daily" className="w-full" value={activeSection} onValueChange={setActiveSection}>
          <div className="bg-white rounded-xl shadow-[0_4px_24px_rgba(0,0,0,0.05)] overflow-hidden border-0">
            <div className="px-4 sm:px-6 pt-4 sm:pt-6 border-b">
              <TabsList className="flex bg-[#F5F5F5] rounded-lg mb-4 p-1">
                    <TabsTrigger 
                  value="daily" 
                  className={`flex-1 data-[state=active]:bg-white data-[state=active]:text-[#E51636] data-[state=active]:shadow-sm`}
                    >
                  <ClipboardCheck className="h-4 w-4 mr-2" />
                  Daily Checklists
                    </TabsTrigger>
                    <TabsTrigger 
                  value="temp" 
                  className={`flex-1 data-[state=active]:bg-white data-[state=active]:text-[#E51636] data-[state=active]:shadow-sm`}
                >
                  <Thermometer className="h-4 w-4 mr-2" />
                  Temperature Ranges
                    </TabsTrigger>
                  </TabsList>
                  </div>

            <div className="p-4 sm:p-6">
              <TabsContent value="daily" className="mt-0 focus-visible:outline-none">
                <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
                  <div>
                    <h2 className="text-xl font-semibold text-[#27251F]">Daily Food Safety Checklist</h2>
                    <p className="text-[#27251F]/70 text-sm mt-1">Manage checklist items for daily food safety monitoring</p>
                  </div>
                              <Button
                                size="sm"
                    onClick={handleAddDailyItemClick}
                    className="text-xs flex items-center gap-1 bg-gradient-to-r from-[#E51636] to-[#C41230] hover:brightness-105 text-white shadow-sm transition-all duration-200 active:translate-y-0.5"
                  >
                    <Plus className="h-3.5 w-3.5" />
                    Add Item
                              </Button>
                            </div>
                            
                {/* Timeframe tabs */}
                <div className="mb-6">
                  <div className="bg-gray-100 rounded-lg p-1 flex">
                    {(['morning', 'lunch', 'dinner'] as TabType[]).map((tab) => (
                      <button
                        key={tab}
                                  className={cn(
                          "flex items-center justify-center gap-2 flex-1 py-2 px-3 rounded-md text-sm font-medium transition-all duration-200",
                          activeTab === tab 
                            ? "bg-white shadow-sm text-[#E51636]" 
                            : "text-gray-600 hover:text-gray-900 hover:bg-gray-200/50"
                        )}
                        onClick={() => setActiveTab(tab)}
                      >
                        {getTabIcon(tab)}
                        <span className="capitalize">{tab}</span>
                        {getIncompleteCount(tab) > 0 && (
                          <span className="inline-flex items-center justify-center w-5 h-5 ml-1.5 text-xs font-medium rounded-full bg-amber-100 text-amber-700">
                            {getIncompleteCount(tab)}
                          </span>
                        )}
                      </button>
                              ))},
                            </div>
                  <p className="text-[#27251F]/60 text-xs mt-2">
                    {activeTab === 'morning' && 'Morning tasks (5am - 11am)'}
                    {activeTab === 'lunch' && 'Lunch tasks (11am - 4pm)'}
                    {activeTab === 'dinner' && 'Dinner tasks (4pm - Close)'}
                  </p>
                          </div>

                {/* Empty state when no items exist */}
                {Object.keys(dailyChecklistItems).length === 0 ? (
                  <div className="text-center py-8 px-4">
                    <div className="mx-auto w-12 h-12 rounded-full bg-gray-100 flex items-center justify-center mb-4">
                      <ClipboardList className="h-6 w-6 text-gray-400" />
                    </div>
                    <h3 className="text-lg font-medium text-gray-900 mb-1">No checklist items</h3>
                    <p className="text-gray-500 max-w-md mx-auto mb-4">
                      You haven't added any daily checklist items yet. Add your first item to start monitoring food safety.
                    </p>
              </div>
                ) : (
                  // Check if there are any items in the current timeframe
                  Object.entries(getItemsByTimeframe(activeTimeframe)).length === 0 ? (
                    <div className="text-center py-8 px-4">
                      <div className="mx-auto w-12 h-12 rounded-full bg-gray-100 flex items-center justify-center mb-4">
                        <ClipboardList className="h-6 w-6 text-gray-400" />
          </div>
                      <h3 className="text-lg font-medium text-gray-900 mb-1">No {activeTimeframe} items</h3>
                      <p className="text-gray-500 max-w-md mx-auto mb-4">
                        You haven't added any checklist items for the {activeTimeframe} timeframe yet.
                      </p>
                    </div>
                  ) : (
                    // Render items for the current timeframe
                    <div>
                      {Object.entries(getItemsByTimeframe(activeTimeframe)).map(([category, items]) => (
                        <div key={category} className="mt-6 first:mt-0">
                          <h4 className="font-medium text-gray-900 mb-3 capitalize">{category.replace('_', ' ')}</h4>
                          <div className="space-y-3">
                            {items.map(item => {
                              // Skip items that don't match the timeframe criteria
                              if (item.timeframe !== activeTimeframe && 
                                  item.timeframe !== '30min' && 
                                  item.timeframe !== 'hourly') {
                                return null;
                              }
                              
                              return (
                                <div key={item.id} className="flex flex-col gap-3 p-3 bg-gray-50 rounded-lg border border-gray-100">
                                  <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3">
                                    <div className="flex-1">
                                      <div className="flex flex-wrap items-center gap-2 mb-1">
                                        <span className="font-medium text-[#27251F]">{item.name}</span>
                                        <Badge 
              className={cn(
                                            "capitalize text-xs",
                                            item.frequency === 'multiple' 
                                              ? "bg-blue-100 text-blue-600 border-blue-200" 
                                              : "bg-green-100 text-green-600 border-green-200"
                                          )}
                                        >
                                          {item.frequency === 'multiple' ? `${item.requiredCompletions} times daily` : 'Once Daily'}
                                        </Badge>
                                        {item.timeframe && (
                                          <Badge variant="outline" className="capitalize text-xs border-gray-300 text-gray-600">
                                            {item.timeframe === '30min' ? '30-min' : item.timeframe}
                                          </Badge>
                                        )}
                                        
                                        {item.isCompleted && (
                                          <Badge className="bg-green-100 text-green-700 border-green-200 capitalize text-xs ml-auto sm:ml-2">
                                            <CheckCircle2 className="h-3 w-3 mr-1" />
                                            Completed
                                          </Badge>
                                        )}
                                        
                                        {!item.isCompleted && (
                                          <Badge className="bg-amber-100 text-amber-700 border-amber-200 capitalize text-xs ml-auto sm:ml-2">
                                            <Clock className="h-3 w-3 mr-1" />
                                            Pending
                                          </Badge>
                      )}
                    </div>
                      </div>
                                    <div className="flex items-center gap-2 mt-2 sm:mt-0">
                                      {!item.isCompleted && (
            <Button
              variant="outline"
                                          size="sm"
                                          onClick={() => handleOpenCompleteDialog(category, item)}
                                          className="h-8 border-green-200 bg-green-50 text-green-600 hover:bg-green-100"
                                        >
                                          <CheckCircle2 className="h-3.5 w-3.5 mr-1.5" />
                                          Complete
            </Button>
                                      )}
            <Button
                                        variant="outline"
                                        size="sm"
                                        onClick={() => handleEditDailyItem(category, item)}
                                        className="h-8 border-gray-300 text-[#27251F]"
                                      >
                                        <Pencil className="h-3.5 w-3.5 mr-1.5" />
                                        Edit
            </Button>
              <Button
                variant="outline"
                                        size="sm"
                                        onClick={() => handleDeleteDailyItem(category, item.id)}
                                        className="h-8 border-red-200 bg-red-50 text-red-600 hover:bg-red-100 hover:text-red-700"
              >
                                        <Trash2 className="h-3.5 w-3.5 mr-1.5" />
                                        Delete
              </Button>
            </div>
          </div>
                                  
                                  {/* Completion history section */}
                                  {item.completions && item.completions.length > 0 && (
                                    <div className="mt-2 pt-2 border-t border-gray-200">
                                      <p className="text-xs font-medium text-gray-500 mb-2">Completion History:</p>
                                      <div className="space-y-2">
                                        {item.completions.slice(0, 3).map((completion) => (
                                          <div key={completion.id} className="flex items-center justify-between bg-white rounded-md p-2 text-xs border border-gray-100">
                                            <div className="flex items-center gap-2">
                                              <User className="h-3 w-3 text-gray-400" />
                                              <span className="font-medium">{completion.completedBy}</span>
                                              <span className="text-gray-500">
                                                {formatTime(completion.completedAt)}
                                              </span>
            </div>
                                            <div className="flex items-center gap-2">
                                              {completion.value && (
                                                <span className="bg-blue-50 text-blue-600 px-2 py-0.5 rounded">
                                                  {completion.value}
                                                </span>
                                              )}
                                              <Badge 
                                                className={cn(
                                                  "capitalize text-xs",
                                                  completion.status === 'pass' 
                                                    ? "bg-green-100 text-green-600 border-green-200" 
                                                    : "bg-red-100 text-red-600 border-red-200"
                                                )}
                                              >
                                                {completion.status}
                                              </Badge>
              <Button
                                                variant="ghost"
                                                size="icon"
                                                onClick={() => handleDeleteCompletion(completion.id)}
                                                className="h-5 w-5 rounded-full hover:bg-red-50 text-red-500 hover:text-red-600"
                                              >
                                                <X className="h-3 w-3" />
              </Button>
            </div>
          </div>
                                        ))},
                                        {item.completions.length > 3 && (
                                          <p className="text-xs text-center text-blue-500 hover:underline cursor-pointer" onClick={() => navigate('daily-checklist')}>
                                            View all {item.completions.length} completions
                                          </p>
                                        )}
              </div>
              </div>
                                  )}
            </div>
                              );
                            })}
              </div>
              </div>
                      ))},
            </div>
                  )}
      </div>
              </TabsContent>

              <TabsContent value="temp" className="mt-0 focus-visible:outline-none">
                <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
                  <div>
                    <h2 className="text-xl font-semibold text-[#27251F]">Temperature Ranges</h2>
                    <p className="text-[#27251F]/70 text-sm mt-1">Set safe temperature ranges for food items</p>
                  </div>
                <Button
                    onClick={() => {
                      setEditedTempRange({
                        id: '',
                        name: '',
                        minTemp: '',
                        maxTemp: '',
                      })
                      setShowAddTempRangeDialog(true)
                    }}
                    className="mt-4 md:mt-0 bg-[#E51636] hover:bg-[#E51636]/90 text-white"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Temperature Range
                </Button>
                </div>

                {tempRanges.length === 0 ? (
                  <div className="flex flex-col items-center justify-center py-16 text-center">
                    <div className="bg-gray-100 rounded-full p-5 mb-4">
                      <Thermometer className="h-8 w-8 text-gray-400" />
                    </div>
                    <h3 className="text-lg font-medium text-[#27251F] mb-1">No temperature ranges</h3>
                    <p className="text-[#27251F]/60 max-w-md mb-6">
                      You haven't added any temperature ranges yet. Add your first range to monitor food temperatures.
                    </p>
                <Button
                  onClick={() => {
                        setEditedTempRange({
                          id: '',
                          name: '',
                          minTemp: '',
                          maxTemp: '',
                        })
                        setShowAddTempRangeDialog(true)
                      }}
                      className="bg-gradient-to-r from-[#E51636] to-[#C41230] hover:brightness-105 text-white shadow-md transition-all duration-200"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Add Your First Range
                </Button>
              </div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {tempRanges.map(range => {
                      const temp = temperatures[range.id.toLowerCase()] || { value: null };
                      let statusColor = 'bg-gray-100';
                      let tempClass = 'text-gray-400';
                      
                      if (temp.value !== null) {
                        const value = Number(temp.value);
                        const min = Number(range.minTemp);
                        const max = Number(range.maxTemp);
                        
                        if (value < min) {
                          statusColor = 'bg-blue-100';
                          tempClass = 'text-blue-600';
                        } else if (value > max) {
                          statusColor = 'bg-red-100';
                          tempClass = 'text-red-600';
                        } else {
                          statusColor = 'bg-green-100';
                          tempClass = 'text-green-600';
                        }
                      }
                  
                  return (
                        <div key={range.id} className="bg-white border border-gray-200 rounded-xl overflow-hidden hover:shadow-md transition-all duration-300">
                          <div className="p-4">
                            <div className="flex items-start justify-between mb-3">
                        <div>
                                <h3 className="font-medium text-[#27251F]">{range.name}</h3>
                                <div className="flex items-center mt-1.5">
                                  <div className="flex items-center text-blue-600 text-sm">
                                    <Thermometer className="h-4 w-4 mr-1.5" />
                                    <span>
                                      {range.minTemp}°F - {range.maxTemp}°F
                              </span>
                      </div>
                    </div>
            </div>
                    <div className="flex items-center gap-2">
                    <Button
                                  variant="ghost"
                                  size="icon"
                                  onClick={() => handleEditTempRange(range)}
                                  className="h-8 w-8 rounded-full hover:bg-gray-100"
                                >
                                  <Pencil className="h-4 w-4 text-gray-500" />
                                </Button>
                                <Button
                                  variant="ghost"
                                  size="icon"
                                  onClick={() => handleDeleteTempRange(range.id)}
                                  className="h-8 w-8 rounded-full hover:bg-red-50 text-red-500 hover:text-red-600"
                                >
                                  <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>

                            <div className="mt-4 pt-4 border-t border-gray-100">
                              <div className="flex items-center justify-between mb-2">
                                <span className="text-sm text-[#27251F]/70">Current temperature:</span>
                                {temp.value !== null ? (
                                  <span className={`font-medium ${tempClass}`}>
                                    {temp.value}°F
                                  </span>
                                ) : (
                                  <span className="text-sm text-[#27251F]/60">
                                    Not recorded
                                  </span>
                                )}
                              </div>
                              
                              <div className={`h-2 w-full rounded-full ${statusColor} relative overflow-hidden mt-1`}>
                                {temp.value !== null && (
                                  <div 
                                    className={`absolute h-full left-0 top-0 bg-opacity-80 ${tempClass.replace('text', 'bg')}`}
                                    style={{ 
                                      width: `${calculatePercentage(temp.value, range.minTemp, range.maxTemp)}%`
                                    }}
                                  />
                            )}
                          </div>
                              
                              <div className="flex justify-between mt-1">
                                <span className="text-xs text-blue-600">{range.minTemp}°F</span>
                                <span className="text-xs text-red-600">{range.maxTemp}°F</span>
                        </div>
                              
                          <Button
                                variant="outline"
                            size="sm"
                                onClick={() => handleRecordTemperatureForRange(range.id)}
                                className="w-full mt-3 text-xs border-blue-200 hover:bg-blue-50 text-blue-600"
                          >
                                <ThermometerSun className="h-3.5 w-3.5 mr-1.5" />
                                Record Temperature
                          </Button>
                            </div>
                          </div>
                      </div>
                    );
                  })}
                    </div>
                  )}
              </TabsContent>
            </div>
          </div>
            </Tabs>

        {/* Edit Lists Dialog */}
        <Dialog open={showEditListDialog} onOpenChange={setShowEditListDialog}>
          <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto p-0 rounded-xl border-0 shadow-xl">
            <div className="bg-[#E51636]/5 p-4 sm:p-6 border-b border-[#E51636]/10">
              <DialogHeader>
                <DialogTitle className="text-xl text-[#27251F]">Edit Food Safety Lists</DialogTitle>
                <DialogDescription className="text-[#27251F]/70 mt-1">
                  Add, remove, or modify your food safety checklist categories.
                </DialogDescription>
              </DialogHeader>
      </div>

            <div className="p-4 sm:p-6">
              <div className="space-y-6">
                <div>
                  <h3 className="text-base font-medium mb-3">Categories</h3>
                  <div className="space-y-2">
                    {Object.entries(editedDailyCategories).map(([category, items]) => (
                      <div key={category} className="flex items-center justify-between bg-gray-50 p-3 rounded-lg border border-gray-200">
                        <div className="flex items-center">
                          <div className="p-2 bg-white rounded-md mr-3 border border-gray-200">
                            <Folder className="h-5 w-5 text-[#E51636]" />
          </div>
                          <div>
                            <p className="font-medium capitalize">{category.replace('_', ' ')}</p>
                            <p className="text-xs text-gray-500">{items.length} items</p>
                    </div>
                        </div>
                      <Button
                        variant="ghost"
                        size="icon"
                          className="h-8 w-8 text-red-500 hover:text-red-600 hover:bg-red-50 rounded-full"
                          onClick={() => handleDeleteCategory(category)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                      </div>
                    ))}
                    </div>
                  </div>
                  
                <Separator />
                
                <div className="space-y-3">
                  <h3 className="text-base font-medium mb-2">Add New Category</h3>
                  <div className="flex gap-2">
                    <Input
                      value={newCategoryName}
                      onChange={(e) => setNewCategoryName(e.target.value)}
                      placeholder="Category name"
                      className="flex-1 border-gray-200 focus:border-[#E51636] focus:ring-[#E51636]/10"
                    />
                    <Button
                      onClick={handleAddCategory}
                      disabled={!newCategoryName.trim()}
                      className="bg-[#E51636] hover:bg-[#E51636]/90 text-white"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Add
                    </Button>
                      </div>
                </div>
              </div>
                    </div>

            <DialogFooter className="p-4 sm:p-6 bg-gray-50 border-t flex flex-col sm:flex-row gap-2 sm:gap-0">
                      <Button
                onClick={() => setShowEditListDialog(false)}
                className="w-full sm:w-auto sm:order-1 border-gray-300"
                        variant="outline"
                      >
                Cancel
                      </Button>
                      <Button
                onClick={handleSaveCategories}
                className="w-full sm:w-auto sm:order-2 bg-gradient-to-r from-[#E51636] to-[#C41230] hover:brightness-105 text-white shadow-md transition-all duration-200 active:translate-y-0.5"
              >
                <Save className="h-4 w-4 mr-2" />
                Save Changes
                      </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Temperature Recording Dialog */}
        <Dialog open={showTempRecordDialog} onOpenChange={setShowTempRecordDialog}>
          <DialogContent className="sm:max-w-[425px] p-0 rounded-xl border-0 shadow-xl overflow-hidden">
            <div className="bg-blue-50 p-4 sm:p-6 border-b border-blue-100">
              <DialogHeader>
                <DialogTitle className="text-xl text-[#27251F]">Record Temperature</DialogTitle>
                <DialogDescription className="text-[#27251F]/70 mt-1">
                  {selectedRange && `Enter the current temperature for ${selectedRange.name}`}
                </DialogDescription>
              </DialogHeader>
                    </div>
            
            <div className="p-4 sm:p-6 space-y-4">
              {selectedRange && (
                <>
                  <div className="flex items-center gap-2 p-3 bg-blue-50/50 rounded-lg border border-blue-100">
                    <ThermometerSun className="h-5 w-5 text-blue-500 flex-shrink-0" />
                  <div>
                      <p className="text-sm font-medium text-[#27251F]">Target Range</p>
                      <p className="text-xs text-[#27251F]/70">
                        {selectedRange.minTemp}°F - {selectedRange.maxTemp}°F
                    </p>
                  </div>
                </div>

                  <div className="space-y-2">
                    <Label htmlFor="temperature" className="text-sm font-medium">Temperature (°F)</Label>
                    <div className="relative">
                      <Input
                        id="temperature"
                        type="number"
                        value={tempValue}
                        onChange={(e) => setTempValue(e.target.value)}
                        placeholder="Enter temperature"
                        className="pr-10 border-gray-200 focus:border-blue-500 focus:ring-blue-500/10 text-lg"
                      />
                      <div className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 pointer-events-none">
                        °F
                  </div>
                  </div>
                    
                    {tempValue && !isNaN(Number(tempValue)) && (
                      <div className="mt-4">
                        <p className="text-sm font-medium mb-2">Temperature Status:</p>
                        <div className={cn(
                          "p-3 rounded-lg flex items-center gap-2",
                          Number(tempValue) < Number(selectedRange.minTemp) 
                            ? "bg-blue-100 text-blue-700" 
                            : Number(tempValue) > Number(selectedRange.maxTemp)
                              ? "bg-red-100 text-red-700"
                              : "bg-green-100 text-green-700"
                        )}>
                          {Number(tempValue) < Number(selectedRange.minTemp) && (
                            <>
                              <ThermometerSnowflake className="h-5 w-5" />
                              <span>Temperature is too low</span>
                            </>
                          )}
                          {Number(tempValue) > Number(selectedRange.maxTemp) && (
                            <>
                              <ThermometerSun className="h-5 w-5" />
                              <span>Temperature is too high</span>
                            </>
                          )}
                          {Number(tempValue) >= Number(selectedRange.minTemp) && 
                           Number(tempValue) <= Number(selectedRange.maxTemp) && (
                            <>
                              <CheckCircle2 className="h-5 w-5" />
                              <span>Temperature is within range</span>
                            </>
                          )}
                </div>
                      </div>
                    )}
                  </div>
                </>
        )}
      </div>

            <DialogFooter className="p-4 sm:p-6 bg-gray-50 border-t flex flex-col sm:flex-row gap-2 sm:gap-0">
              <Button 
                variant="outline" 
                onClick={() => setShowTempRecordDialog(false)}
                className="w-full sm:w-auto order-2 sm:order-1 border-gray-300"
              >
                Cancel
              </Button>
              <Button 
                onClick={handleSaveTemperature}
                disabled={!tempValue || isNaN(Number(tempValue))}
                className="w-full sm:w-auto order-1 sm:order-2 bg-gradient-to-r from-[#E51636] to-[#C41230] hover:brightness-105 text-white shadow-md transition-all duration-200 active:translate-y-0.5"
              >
                <Save className="h-4 w-4 mr-2" />
                Save Temperature
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Complete Checklist Item Dialog */}
      <Dialog open={completeItemDialog} onOpenChange={setCompleteItemDialog}>
          <DialogContent className="sm:max-w-[425px] p-0 rounded-xl border-0 shadow-xl overflow-hidden">
            <div className="bg-green-50 p-4 sm:p-6 border-b border-green-100">
          <DialogHeader>
                <DialogTitle className="text-xl text-[#27251F]">Complete Checklist Item</DialogTitle>
                <DialogDescription className="text-[#27251F]/70 mt-1">
                  {selectedItem && `Mark "${selectedItem.item.name}" as completed`}
                </DialogDescription>
          </DialogHeader>
                </div>
            
            <div className="p-4 sm:p-6 space-y-4">
              {selectedItem && (
                <>
                  <div className="flex items-center gap-3 p-3 bg-green-50/50 rounded-lg border border-green-100">
                    <div className={cn(
                      "p-2 rounded-full",
                      selectedItem.item.timeframe === 'morning' ? 'bg-amber-100' :
                      selectedItem.item.timeframe === 'lunch' ? 'bg-blue-100' :
                      selectedItem.item.timeframe === 'dinner' ? 'bg-indigo-100' :
                      'bg-gray-100'
                    )}>
                      {selectedItem.item.timeframe === 'morning' && <Coffee className="h-5 w-5 text-amber-600" />}
                      {selectedItem.item.timeframe === 'lunch' && <Utensils className="h-5 w-5 text-blue-600" />}
                      {selectedItem.item.timeframe === 'dinner' && <Moon className="h-5 w-5 text-indigo-600" />}
                      {(selectedItem.item.timeframe === '30min' || selectedItem.item.timeframe === 'hourly') && 
                        <Clock className="h-5 w-5 text-gray-600" />}
                </div>
                    <div>
                      <p className="text-sm font-medium text-[#27251F]">{selectedItem.item.name}</p>
                      <p className="text-xs text-[#27251F]/70 flex items-center gap-1">
                        <span className="capitalize">{selectedItem.item.timeframe}</span>
                        {selectedItem.item.frequency === 'multiple' && 
                          <span> • Requires {selectedItem.item.requiredCompletions} completions</span>}
                      </p>
              </div>
            </div>
                  
                  <div className="space-y-3">
                    <div className="space-y-2">
                      <Label htmlFor="status" className="text-sm font-medium">Status</Label>
                      <Select 
                        value={formData.status} 
                        onValueChange={(value) => setFormData({...formData, status: value})}
                      >
                        <SelectTrigger className="border-gray-200 focus:border-green-500 focus:ring-green-500/10">
                          <SelectValue placeholder="Select status" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="pass">Pass</SelectItem>
                          <SelectItem value="fail">Fail</SelectItem>
                          <SelectItem value="warning">Warning</SelectItem>
                          <SelectItem value="n/a">Not Applicable</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="value" className="text-sm font-medium">Value (Optional)</Label>
              <Input
                id="value"
                        type="text"
                value={formData.value}
                        onChange={(e) => setFormData({...formData, value: e.target.value})}
                        placeholder="e.g. 120°F, 3 units, etc."
                        className="border-gray-200 focus:border-green-500 focus:ring-green-500/10"
              />
            </div>
                    
                    <div className="space-y-2">
                      <Label htmlFor="notes" className="text-sm font-medium">Notes (Optional)</Label>
              <Textarea
                id="notes"
                value={formData.notes}
                        onChange={(e) => setFormData({...formData, notes: e.target.value})}
                        placeholder="Add any additional information..."
                        className="min-h-[80px] border-gray-200 focus:border-green-500 focus:ring-green-500/10"
              />
            </div>
          </div>
                </>
              )}
            </div>
            
            <DialogFooter className="p-4 sm:p-6 bg-gray-50 border-t flex flex-col sm:flex-row gap-2 sm:gap-0">
              <Button 
                variant="outline" 
                onClick={handleCloseCompleteDialog}
                className="w-full sm:w-auto order-2 sm:order-1 border-gray-300"
              >
                Cancel
              </Button>
              <Button 
                onClick={handleCompleteItem}
                className="w-full sm:w-auto order-1 sm:order-2 bg-gradient-to-r from-[#E51636] to-[#C41230] hover:brightness-105 text-white shadow-md transition-all duration-200 active:translate-y-0.5"
              >
                <CheckCircle2 className="h-4 w-4 mr-2" />
                Complete Item
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

        {/* Add/Edit Checklist Item Dialog */}
        <Dialog open={showAddDailyItemDialog} onOpenChange={setShowAddDailyItemDialog}>
          <DialogContent className="sm:max-w-[500px] p-0 rounded-xl border-0 shadow-xl overflow-hidden">
            <div className="bg-[#E51636]/5 p-4 sm:p-6 border-b border-[#E51636]/10">
            <DialogHeader>
                <DialogTitle className="text-xl text-[#27251F]">
                  {editedDailyItem.id ? 'Edit Checklist Item' : 'Add Checklist Item'}
                </DialogTitle>
                <DialogDescription className="text-[#27251F]/70 mt-1">
                  {editedDailyItem.id 
                    ? 'Update the details of this food safety checklist item' 
                    : 'Add a new item to your food safety checklist'}
              </DialogDescription>
            </DialogHeader>
            </div>
            
            <div className="p-4 sm:p-6 space-y-4">
              <div className="space-y-3">
                <div className="space-y-2">
                  <Label htmlFor="name" className="text-sm font-medium">Item Name <span className="text-red-500">*</span></Label>
                <Input
                    id="name"
                    value={editedDailyItem.name}
                    onChange={(e) => setEditedDailyItem({...editedDailyItem, name: e.target.value})}
                    placeholder="e.g. Check walk-in cooler temperature"
                    className="border-gray-200 focus:border-[#E51636] focus:ring-[#E51636]/10"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="category" className="text-sm font-medium">Category <span className="text-red-500">*</span></Label>
                  <Select 
                    value={newItemCategory} 
                    onValueChange={setNewItemCategory}
                  >
                    <SelectTrigger id="category" className="border-gray-200 focus:border-[#E51636] focus:ring-[#E51636]/10">
                      <SelectValue placeholder="Select a category" />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.keys(dailyChecklistItems).map(category => (
                        <SelectItem key={category} value={category}>
                          {category.replace('_', ' ')}
                        </SelectItem>
                      ))},
                      <SelectItem value="new">+ Add new category</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                {newItemCategory === 'new' && (
                  <div className="space-y-2">
                    <Label htmlFor="newCategory" className="text-sm font-medium">New Category Name <span className="text-red-500">*</span></Label>
                    <Input
                      id="newCategory"
                      value={newCategoryName}
                      onChange={(e) => setNewCategoryName(e.target.value)}
                      placeholder="e.g. Refrigeration, Food Prep"
                      className="border-gray-200 focus:border-[#E51636] focus:ring-[#E51636]/10"
                    />
                  </div>
                )}
                
                <div className="space-y-2">
                  <Label htmlFor="timeframe" className="text-sm font-medium">Timeframe <span className="text-red-500">*</span></Label>
                  <Select 
                    value={editedDailyItem.timeframe as string} 
                    onValueChange={(value: TimeFrame) => setEditedDailyItem({...editedDailyItem, timeframe: value})}
                  >
                    <SelectTrigger id="timeframe" className="border-gray-200 focus:border-[#E51636] focus:ring-[#E51636]/10">
                      <SelectValue placeholder="Select a timeframe" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="morning">Morning (5am - 11am)</SelectItem>
                      <SelectItem value="lunch">Lunch (11am - 4pm)</SelectItem>
                      <SelectItem value="dinner">Dinner (4pm - Close)</SelectItem>
                      <SelectItem value="30min">Every 30 minutes</SelectItem>
                      <SelectItem value="hourly">Hourly</SelectItem>
                    </SelectContent>
                  </Select>
              </div>
              
                <div className="space-y-2">
                  <Label htmlFor="frequency" className="text-sm font-medium">Frequency <span className="text-red-500">*</span></Label>
                  <Select 
                    value={editedDailyItem.frequency as string} 
                    onValueChange={(value) => {
                      const newFrequency = value as 'once' | 'multiple';
                      setEditedDailyItem({
                        ...editedDailyItem, 
                        frequency: newFrequency,
                        requiredCompletions: newFrequency === 'once' ? 1 : editedDailyItem.requiredCompletions
                      });
                    }}
                  >
                    <SelectTrigger id="frequency" className="border-gray-200 focus:border-[#E51636] focus:ring-[#E51636]/10">
                      <SelectValue placeholder="Select frequency" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="once">Once per day</SelectItem>
                      <SelectItem value="multiple">Multiple times per day</SelectItem>
                    </SelectContent>
                  </Select>
                        </div>
                
                {editedDailyItem.frequency === 'multiple' && (
                  <div className="space-y-2">
                    <Label htmlFor="requiredCompletions" className="text-sm font-medium">Required Completions <span className="text-red-500">*</span></Label>
                    <Input
                      id="requiredCompletions"
                      type="number"
                      min="2"
                      value={editedDailyItem.requiredCompletions}
                      onChange={(e) => setEditedDailyItem({...editedDailyItem, requiredCompletions: parseInt(e.target.value) || 2})}
                      className="border-gray-200 focus:border-[#E51636] focus:ring-[#E51636]/10"
                    />
                  </div>
                )}
              </div>
            </div>
            
            <DialogFooter className="p-4 sm:p-6 bg-gray-50 border-t flex flex-col sm:flex-row gap-2 sm:gap-0">
              <Button 
                variant="outline" 
                onClick={() => setShowAddDailyItemDialog(false)}
                className="w-full sm:w-auto order-2 sm:order-1 border-gray-300"
              >
                Cancel
              </Button>
              <Button 
                onClick={handleSaveItem}
                disabled={!editedDailyItem.name || (!newItemCategory && newItemCategory !== 'new') || (newItemCategory === 'new' && !newCategoryName)}
                className="w-full sm:w-auto order-1 sm:order-2 bg-gradient-to-r from-[#E51636] to-[#C41230] hover:brightness-105 text-white shadow-md transition-all duration-200 active:translate-y-0.5"
              >
                <Save className="h-4 w-4 mr-2" />
                {editedDailyItem.id ? 'Update Item' : 'Add Item'}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
              </div>
            </div>
  )
}

// Add this helper function to calculate the temperature percentage for the visual bar
function calculatePercentage(value, min, max) {
  // Convert to numbers
  const numValue = Number(value);
  const numMin = Number(min);
  const numMax = Number(max);
  
  // Range width
  const range = numMax - numMin;
  
  // Calculate percentage
  let percentage = ((numValue - numMin) / range) * 100;
  
  // Clamp between 0 and 100
  percentage = Math.max(0, Math.min(100, percentage));
  
  return percentage;
}

export default FoodSafety;
