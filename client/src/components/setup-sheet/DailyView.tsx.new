import { useState, useEffect, useRef, useMemo } from 'react'
import { Card } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Clock, User, Calendar, ArrowLeft, Coffee, Play, Pause, Download, Printer, RefreshCw, Search, Filter, ChevronDown, X, Check, Save, Plus } from 'lucide-react'
import { AddPositionDialog } from './AddPositionDialog'
import { format, isToday, parseISO } from 'date-fns'
import { formatHourTo12Hour } from '@/lib/utils/date-utils'
import { useNavigate } from 'react-router-dom'
import { useToast } from '@/components/ui/use-toast'
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip'
import { Progress } from '@/components/ui/progress'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"

// Import our new components
import DayHourSelector from './DayHourSelector'
import AreaTabs from './AreaTabs'
import { 
  AssignedEmployeesSection, 
  UnassignedEmployeesSection, 
  AllEmployeesSection,
  NoEmployeesMessage
} from './sections'

// Define types for our component props
interface DailyViewProps {
  setup: any
  onBack: () => void
}

export default function DailyView({ setup, onBack }: DailyViewProps) {
  // Keep all the existing state and functions from the original component
  // ...

  // Render the component with our new components
  return (
    <div className="flex flex-col h-full">
      {/* Streamlined header with controls */}
      <div className="bg-white border-b p-4 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div className="flex items-center gap-2">
          <Button variant="outline" size="icon" onClick={onBack} className="h-8 w-8">
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1 className="text-xl font-bold">{setup.name}</h1>
          <Badge variant="outline" className="ml-2">
            {format(new Date(setup.startDate), 'MMM d')} - {format(new Date(setup.endDate), 'MMM d, yyyy')}
          </Badge>
        </div>

        {/* Action buttons - full width on mobile */}
        <div className="flex flex-col sm:flex-row gap-2 w-full sm:w-auto">
          <Button 
            variant="outline" 
            className="w-full sm:w-auto justify-start sm:justify-center"
            onClick={() => setShowEmployeeList(true)}
          >
            <User className="h-4 w-4 mr-2" />
            Employees
          </Button>
          <Button 
            variant="default" 
            className="w-full sm:w-auto justify-start sm:justify-center bg-blue-500 hover:bg-blue-600"
            onClick={handleSaveChanges}
            disabled={!hasChanges}
          >
            <Save className="h-4 w-4 mr-2" />
            Save Changes
          </Button>
        </div>
      </div>

      {/* Day and hour selection dropdowns */}
      <div className="bg-white border rounded-lg shadow-sm overflow-hidden flex-1 flex flex-col">
        <DayHourSelector 
          days={days}
          activeDay={activeDay}
          setActiveDay={setActiveDay}
          activeHour={activeHour}
          setActiveHour={setActiveHour}
          allHours={allHours}
          getDateForDay={getDateForDay}
          formatDayName={formatDayName}
          getTodayDayName={getTodayDayName}
        />

        <div className="flex-1 overflow-y-auto p-4">
          {/* Area tabs - redesigned with better visual hierarchy */}
          {showEmployeeList && (
            <AreaTabs 
              employeeAreaTab={employeeAreaTab}
              setEmployeeAreaTab={setEmployeeAreaTab}
              showCurrentShiftOnly={showCurrentShiftOnly}
              setShowCurrentShiftOnly={setShowCurrentShiftOnly}
              countAssignedEmployees={countAssignedEmployees}
              countUnassignedEmployees={countUnassignedEmployees}
            />
          )}

          {/* We've removed the duplicate "Current time blocks" section and kept only the hour-based view */}

          {/* Position display - enhanced with better visual hierarchy */}
          {activeHour && allHours.length > 0 && (
            <div className="mb-6 space-y-2">
              <h3 className="text-md font-semibold flex items-center">
                <div className={`flex h-5 w-5 items-center justify-center rounded-full ${activeDay === getTodayDayName() && parseInt(activeHour) === new Date().getHours() ? 'bg-blue-200 animate-pulse' : 'bg-blue-100'} mr-2`}>
                  <Clock className="h-3 w-3 text-blue-600" />
                </div>
                <span className="text-blue-800">{formatHourTo12Hour(activeHour)} - {formatHourTo12Hour(parseInt(activeHour) + 1)}</span>
                {activeDay === getTodayDayName() && parseInt(activeHour) === new Date().getHours() && (
                  <>
                    <Badge className="ml-2 bg-blue-500 text-white">Current Hour</Badge>
                    <span className="ml-2 text-sm text-blue-600 font-normal">
                      Current time: {formatHourTo12Hour(`${new Date().getHours()}:${new Date().getMinutes()}`)}
                    </span>
                  </>
                )}
              </h3>

              {hourTimeBlocks.length === 0 ? (
                <Card className="p-4 text-center text-gray-500">
                  <p className="text-sm">No positions scheduled for {formatHourTo12Hour(activeHour)} - {formatHourTo12Hour(parseInt(activeHour) + 1)}</p>
                  <p className="text-xs mt-1">Try selecting a different hour or check the schedule</p>
                </Card>
              ) : (
                <div className="space-y-3">
                  {hourTimeBlocks.map((block: TimeBlock) => {
                    const isCurrent = isCurrentTimeBlock(block) && activeDay === getTodayDayName()

                    return (
                      <Card
                        key={block.id}
                        className={`p-3 ${isCurrent ? 'border-blue-200 bg-blue-50' : ''}`}
                      >
                        <div className="flex justify-between items-center mb-2">
                          <div className="flex items-center">
                            {isCurrent && <div className="h-2 w-2 rounded-full bg-green-500 mr-2 animate-pulse"></div>}
                            <h4 className="text-sm font-medium">{formatHourTo12Hour(block.start)} - {formatHourTo12Hour(block.end)}</h4>
                          </div>
                          <div className="flex items-center gap-2">
                            {isCurrent && <Badge className="bg-blue-500 text-white">Current</Badge>}
                          </div>
                        </div>

                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 mt-3">
                          {block.positions.map((position: Position) => {
                            const employee = getEmployeeById(position.employeeId)
                            const breakStatus = position.employeeId ? getBreakStatus(position.employeeId) : null
                            const hasBreak = position.employeeId ? hasHadBreak(position.employeeId) : false

                            return (
                              <div
                                key={position.id}
                                className={`relative border rounded-md p-3 ${
                                  breakStatus === 'active'
                                    ? 'bg-amber-50 border-amber-200'
                                    : hasBreak
                                    ? 'bg-green-50 border-green-200'
                                    : position.employeeId
                                    ? 'bg-blue-50 border-blue-100'
                                    : 'bg-white border-gray-200'
                                }`}
                              >
                                <div className="flex justify-between items-start">
                                  <div>
                                    <h5 className="font-medium text-sm">{position.name}</h5>
                                    {position.employeeId ? (
                                      <div className="mt-2">
                                        <div className="flex items-center">
                                          <div className="h-6 w-6 rounded-full bg-blue-100 flex items-center justify-center mr-2">
                                            <User className="h-3 w-3 text-blue-600" />
                                          </div>
                                          <span className="text-sm font-medium">{employee?.name}</span>
                                          {breakStatus === 'active' && (
                                            <Badge className="ml-2 bg-amber-100 text-amber-600 border-amber-200">
                                              <Coffee className="h-3 w-3 mr-1" />
                                              Break
                                            </Badge>
                                          )}
                                          {hasBreak && breakStatus !== 'active' && (
                                            <Badge className="ml-2 bg-green-100 text-green-600 border-green-200">
                                              <Check className="h-3 w-3 mr-1" />
                                              Had Break
                                            </Badge>
                                          )}
                                        </div>
                                      </div>
                                    ) : (
                                      <div className="mt-2 flex items-center text-gray-500">
                                        <User className="h-4 w-4 mr-1 text-gray-400" />
                                        <span className="text-sm">Unassigned</span>
                                      </div>
                                    )}
                                  </div>
                                  <Button
                                    variant="ghost"
                                    size="icon"
                                    className="h-7 w-7"
                                    onClick={() => handlePositionClick(position)}
                                  >
                                    {position.employeeId ? (
                                      <RefreshCw className="h-4 w-4 text-blue-500" />
                                    ) : (
                                      <Plus className="h-4 w-4 text-gray-500" />
                                    )}
                                  </Button>
                                </div>
                              </div>
                            )
                          })}

                          {/* Add Position option */}
                          <div
                            className="border border-dashed rounded-md p-3 flex items-center justify-center cursor-pointer hover:bg-gray-50"
                            onClick={() => handleAddPositionClick(block)}
                          >
                            <div className="text-center">
                              <div className="h-8 w-8 rounded-full bg-gray-100 flex items-center justify-center mx-auto">
                                <Plus className="h-4 w-4 text-gray-500" />
                              </div>
                              <span className="text-sm text-gray-500 mt-1 block">Add Position</span>
                            </div>
                          </div>
                        </div>
                      </Card>
                    )
                  })}
                </div>
              )}
            </div>
          )}

          {/* Employee List Dialog Content */}
          {showEmployeeList && (
            <>
              {/* Assigned Employees Section - Show First */}
              <AssignedEmployeesSection 
                filteredAssignedEmployees={filterEmployeesByArea(getDayEmployees().filter(e => e.positions.some(p => p !== 'Scheduled')))}
                getBreakStatus={getBreakStatus}
                getRemainingBreakTime={getRemainingBreakTime}
                hasHadBreak={hasHadBreak}
                handleBreakClick={handleBreakClick}
                handleReplaceClick={handleReplaceClick}
                endBreak={endBreak}
              />

              {/* Unassigned Employees Section - Show Second */}
              <UnassignedEmployeesSection 
                filteredUnassignedEmployees={filterEmployeesByArea(unassignedEmployees)}
                getBreakStatus={getBreakStatus}
                getRemainingBreakTime={getRemainingBreakTime}
                hasHadBreak={hasHadBreak}
                handleBreakClick={handleBreakClick}
                handleReplaceClick={handleReplaceClick}
                endBreak={endBreak}
              />

              {/* All Employees Section */}
              <AllEmployeesSection 
                filteredScheduledEmployees={filterEmployeesByArea(scheduledEmployees)}
                filteredUnassignedEmployees={filterEmployeesByArea(unassignedEmployees)}
                filteredAssignedEmployees={filterEmployeesByArea(getDayEmployees().filter(e => e.positions.some(p => p !== 'Scheduled')))}
                getBreakStatus={getBreakStatus}
                getRemainingBreakTime={getRemainingBreakTime}
                hasHadBreak={hasHadBreak}
                handleBreakClick={handleBreakClick}
                handleReplaceClick={handleReplaceClick}
                endBreak={endBreak}
              />

              {/* Show message if no employees match the filter */}
              {(() => {
                const filteredScheduledEmployees = filterEmployeesByArea(scheduledEmployees);
                const filteredUnassignedEmployees = filterEmployeesByArea(unassignedEmployees);
                const filteredAssignedEmployees = filterEmployeesByArea(getDayEmployees().filter(e => e.positions.some(p => p !== 'Scheduled')));

                const noEmployeesMatchFilter = employeeAreaTab !== 'all' &&
                  filteredScheduledEmployees.length === 0 &&
                  scheduledEmployees.length > 0 &&
                  filteredUnassignedEmployees.length === 0 &&
                  filteredAssignedEmployees.length === 0;

                return noEmployeesMatchFilter && (
                  <NoEmployeesMessage type="filter" employeeAreaTab={employeeAreaTab} />
                );
              })()}

              {/* Show message if no employees match the current shift filter */}
              {(() => {
                const filteredAssignedEmployees = filterEmployeesByArea(getDayEmployees().filter(e => e.positions.some(p => p !== 'Scheduled')));
                const filteredUnassignedEmployees = filterEmployeesByArea(unassignedEmployees);

                const noEmployeesOnCurrentShift = showCurrentShiftOnly &&
                  filteredAssignedEmployees.length === 0 &&
                  filteredUnassignedEmployees.length === 0 &&
                  scheduledEmployees.length > 0;

                return noEmployeesOnCurrentShift && (
                  <NoEmployeesMessage type="currentShift" />
                );
              })()}

              {/* Show message if no employees for this day */}
              {scheduledEmployees.length === 0 && (
                <NoEmployeesMessage type="noSchedule" />
              )}
            </>
          )}
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => setShowEmployeeList(false)} className="w-full sm:w-auto">
            <X className="h-4 w-4 mr-2" />
            Close
          </Button>
        </DialogFooter>
      </div>

      {/* Enhanced Break Dialog */}
      <Dialog open={showBreakDialog} onOpenChange={setShowBreakDialog}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <Coffee className="h-5 w-5 mr-2 text-amber-500" />
              Start Break
            </DialogTitle>
            <DialogDescription>
              {selectedEmployee ? `Select a break duration for ${selectedEmployee.name}` : 'Select an employee and break duration'}
            </DialogDescription>
          </DialogHeader>

          <div className="py-4 space-y-4">
            {selectedEmployee && (
              <div className={`p-3 rounded-lg border ${hasHadBreak(selectedEmployee.id) ? 'bg-green-50 border-green-100' : 'bg-amber-50 border-amber-100'}`}>
                <div className="flex items-center gap-3">
                  <div className={`h-10 w-10 rounded-full flex items-center justify-center ${hasHadBreak(selectedEmployee.id) ? 'bg-green-100' : 'bg-amber-100'}`}>
                    <User className={`h-5 w-5 ${hasHadBreak(selectedEmployee.id) ? 'text-green-600' : 'text-amber-600'}`} />
                  </div>
                  <div>
                    <h4 className="font-medium">{selectedEmployee.name}</h4>
                    {hasHadBreak(selectedEmployee.id) ? (
                      <div className="flex items-center text-sm text-green-600">
                        <Check className="h-3 w-3 mr-1" />
                        <p>Has already had a break today</p>
                      </div>
                    ) : (
                      <p className="text-sm text-gray-500">No breaks taken today</p>
                    )}
                  </div>
                </div>
              </div>
            )}

            <div className="space-y-2">
              <label className="text-sm font-medium">Break Duration</label>
              <div className="grid grid-cols-2 gap-3">
                <Button
                  variant={breakDuration === 30 ? 'default' : 'outline'}
                  className={breakDuration === 30 ? 'bg-amber-500 hover:bg-amber-600' : ''}
                  onClick={() => setBreakDuration(30)}
                >
                  <Coffee className="h-4 w-4 mr-2" />
                  30 Minutes
                </Button>
                <Button
                  variant={breakDuration === 60 ? 'default' : 'outline'}
                  className={breakDuration === 60 ? 'bg-amber-500 hover:bg-amber-600' : ''}
                  onClick={() => setBreakDuration(60)}
                >
                  <Coffee className="h-4 w-4 mr-2" />
                  60 Minutes
                </Button>
              </div>
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setShowBreakDialog(false)}>Cancel</Button>
            <Button
              onClick={handleStartBreak}
              className="bg-amber-500 hover:bg-amber-600"
              disabled={!selectedEmployee}
            >
              <Coffee className="h-4 w-4 mr-2" />
              Start Break
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Employee List Dialog */}
      <Dialog open={showEmployeeList} onOpenChange={setShowEmployeeList}>
        <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-hidden flex flex-col">
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <User className="h-5 w-5 mr-2 text-blue-500" />
              Employees
            </DialogTitle>
            <DialogDescription>
              View and manage employees for {formatDayName(activeDay)}
            </DialogDescription>
          </DialogHeader>

          {/* Dialog content is now rendered inline in the main component */}
        </DialogContent>
      </Dialog>

      {/* Enhanced Assign Employee Dialog */}
      <Dialog open={showAssignDialog} onOpenChange={setShowAssignDialog}>
        <DialogContent className="sm:max-w-[500px]" ref={assignDialogRef} tabIndex={0}>
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <User className="h-5 w-5 mr-2 text-blue-500" />
              Assign Employee
            </DialogTitle>
            <DialogDescription>
              {selectedPosition ? (
                <>
                  <div>Select an employee to assign to <span className="font-medium">{selectedPosition.name}</span></div>
                  <div className="flex items-center mt-2 bg-blue-50 p-2 rounded-md border border-blue-100">
                    <Clock className="h-4 w-4 mr-2 text-blue-500" />
                    <span className="text-sm">Time block: <span className="font-medium">{formatHourTo12Hour(selectedPosition.blockStart)} - {formatHourTo12Hour(selectedPosition.blockEnd)}</span></span>
                  </div>
                </>
              ) : 'Select an employee'}
            </DialogDescription>
          </DialogHeader>

          <div className="py-4 max-h-[60vh] overflow-y-auto">
            {!selectedPosition || !selectedPosition.blockStart ? (
              <div className="text-center text-gray-500 py-4">
                <p>No time block selected</p>
              </div>
            ) : (
              <>
                {/* Show available employees */}
                {getAvailableEmployeesForTimeBlock(selectedPosition.blockStart, selectedPosition.blockEnd).length === 0 ? (
                  <div className="text-center py-6 bg-gray-50 rounded-lg border border-gray-100 flex flex-col items-center">
                    <User className="h-8 w-8 text-gray-300 mb-2" />
                    <p className="text-gray-500 font-medium">No employees available</p>
                    <p className="text-gray-400 text-sm">There are no employees scheduled for this time block</p>
                    <Button variant="outline" size="sm" className="mt-4" onClick={() => setShowEmployeeList(true)}>
                      View All Employees
                    </Button>
                  </div>
                ) : (
                  <>
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="text-sm font-medium">Available Employees ({getAvailableEmployeesForTimeBlock(selectedPosition.blockStart, selectedPosition.blockEnd).length})</h3>
                      <div className="relative">
                        <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                        <input
                          type="text"
                          placeholder="Search employees..."
                          className="pl-8 pr-2 py-1 text-sm border rounded-md w-[180px]"
                          autoFocus={false}
                          tabIndex="-1"
                        />
                      </div>
                    </div>
                    <div className="space-y-2 mb-4">
                      {getAvailableEmployeesForTimeBlock(selectedPosition.blockStart, selectedPosition.blockEnd).map(employee => (
                        <div
                          key={employee.id}
                          className="flex justify-between items-center p-3 border rounded-md hover:bg-blue-50 cursor-pointer transition-colors"
                          onClick={() => handleAssignEmployee(employee.id, employee.name)}
                        >
                          <div className="flex items-center gap-3">
                            <div className="h-10 w-10 rounded-full bg-gray-100 flex items-center justify-center">
                              <User className="h-5 w-5 text-gray-500" />
                            </div>
                            <div>
                              <div className="flex items-center gap-2">
                                <div className="font-medium">{employee.name}</div>
                                {employee.area && (
                                  <Badge variant="outline" className={`text-xs ${employee.area === 'FOH' ? 'bg-blue-50 text-blue-600 border-blue-100' : 'bg-green-50 text-green-600 border-green-100'}`}>
                                    {employee.area}
                                  </Badge>
                                )}
                              </div>
                              <div className="text-xs text-gray-500 mt-1 flex items-center">
                                <Clock className="h-3 w-3 mr-1" />
                                <span>
                                  {scheduledEmployees.find(e => e.id === employee.id)?.timeBlock ?
                                    scheduledEmployees.find(e => e.id === employee.id)?.timeBlock.split(' - ').map(time => formatHourTo12Hour(time)).join(' - ') :
                                    employee.timeBlocks.map(block => block.split(' - ').map(time => formatHourTo12Hour(time)).join(' - ')).join(', ')
                                  }
                                </span>
                              </div>
                            </div>
                          </div>

                          <Button variant="outline" size="sm" className="border-blue-200 text-blue-600 hover:bg-blue-50">
                            <User className="h-4 w-4 mr-1" />
                            Assign
                          </Button>
                        </div>
                      ))}
                    </div>
                  </>
                )}
              </>
            )}
          </div>

          <DialogFooter className="flex justify-between">
            <Button variant="outline" onClick={() => setShowAssignDialog(false)}>Cancel</Button>
            {selectedPosition && selectedPosition.employeeId && (
              <Button
                variant="outline"
                className="border-red-200 text-red-600 hover:bg-red-50"
                onClick={() => {
                  if (selectedPosition) {
                    handleRemoveAssignment(selectedPosition);
                    setShowAssignDialog(false);
                  }
                }}
              >
                Clear Assignment
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Add Position Dialog */}
      <AddPositionDialog
        open={showAddPositionDialog}
        onOpenChange={setShowAddPositionDialog}
        onAddPosition={handleAddPosition}
        timeBlock={selectedTimeBlock || { id: '', start: '', end: '', positions: [] }}
      />

      {/* Replace Employee Dialog */}
      <Dialog open={showReplaceDialog} onOpenChange={setShowReplaceDialog}>
        <DialogContent className="sm:max-w-[425px]" ref={replaceDialogRef}>
          <DialogHeader>
            <DialogTitle className="flex items-center">
              <RefreshCw className="h-5 w-5 mr-2 text-blue-500" />
              Replace Employee
            </DialogTitle>
            <DialogDescription>
              {selectedEmployeeToReplace
                ? `Enter the name of the employee who will replace ${selectedEmployeeToReplace.name}`
                : 'Enter replacement employee name'}
            </DialogDescription>
          </DialogHeader>

          <div className="py-4 space-y-4">
            {selectedEmployeeToReplace && (
              <div className="p-3 rounded-lg border bg-blue-50 border-blue-100">
                <div className="flex items-center gap-3">
                  <div className="h-10 w-10 rounded-full flex items-center justify-center bg-blue-100">
                    <User className="h-5 w-5 text-blue-600" />
                  </div>
                  <div>
                    <h4 className="font-medium">{selectedEmployeeToReplace.name}</h4>
                    <p className="text-sm text-gray-500">Will be replaced with:</p>
                  </div>
                </div>
              </div>
            )}

            <div className="space-y-2">
              <label className="text-sm font-medium">Replacement Employee Name</label>
              <Input
                type="text"
                placeholder="Enter name..."
                value={replacementName}
                onChange={(e) => setReplacementName(e.target.value)}
                className="w-full"
              />
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setShowReplaceDialog(false)} disabled={isReplacing}>Cancel</Button>
            <Button
              onClick={handleReplaceEmployee}
              className="bg-blue-500 hover:bg-blue-600"
              disabled={!replacementName.trim() || isReplacing}
            >
              {isReplacing ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  Replacing...
                </>
              ) : (
                <>
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Replace
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
