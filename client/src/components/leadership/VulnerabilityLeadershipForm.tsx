import React, { useState, useEffect } from 'react'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { Input } from '@/components/ui/input'

interface VulnerabilityLeadershipFormProps {
  value: string
  onChange: (value: string) => void
}

const VulnerabilityLeadershipForm: React.FC<VulnerabilityLeadershipFormProps> = ({ value, onChange }) => {
  const [keyInsights, setKeyInsights] = useState<string>('')
  const [vulnerabilityStrength, setVulnerabilityStrength] = useState<string>('')
  const [authenticAction1, setAuthenticAction1] = useState<string>('')
  const [authenticAction2, setAuthenticAction2] = useState<string>('')
  const [authenticAction3, setAuthenticAction3] = useState<string>('')

  // Parse the initial value if it exists
  useEffect(() => {
    if (value) {
      try {
        const parsedValue = JSON.parse(value)
        setKeyInsights(parsedValue.keyInsights || '')
        setVulnerabilityStrength(parsedValue.vulnerabilityStrength || '')
        setAuthenticAction1(parsedValue.authenticAction1 || '')
        setAuthenticAction2(parsedValue.authenticAction2 || '')
        setAuthenticAction3(parsedValue.authenticAction3 || '')
      } catch (e) {
        // If parsing fails, use the value as-is for the first field
        setKeyInsights(value)
      }
    }
  }, [])

  // Update the parent component with the structured data
  useEffect(() => {
    const formData = JSON.stringify({
      keyInsights,
      vulnerabilityStrength,
      authenticAction1,
      authenticAction2,
      authenticAction3
    })
    onChange(formData)
  }, [keyInsights, vulnerabilityStrength, authenticAction1, authenticAction2, authenticAction3, onChange])

  return (
    <div className="space-y-3">
      <div className="space-y-1">
        <Label htmlFor="key-insights" className="text-xs font-medium">Key Insights from TED Talk</Label>
        <Textarea
          id="key-insights"
          placeholder="What were the key insights about vulnerability from BrenÃ© Brown's talk?"
          value={keyInsights}
          onChange={(e) => setKeyInsights(e.target.value)}
          className="min-h-[80px] text-sm"
        />
      </div>
      
      <div className="space-y-1">
        <Label htmlFor="vulnerability-strength" className="text-xs font-medium">Vulnerability as Strength</Label>
        <Textarea
          id="vulnerability-strength"
          placeholder="How can showing appropriate vulnerability strengthen your leadership?"
          value={vulnerabilityStrength}
          onChange={(e) => setVulnerabilityStrength(e.target.value)}
          className="min-h-[80px] text-sm"
        />
      </div>
      
      <div className="space-y-1">
        <Label htmlFor="authentic-action-1" className="text-xs font-medium">Authentic Action 1</Label>
        <Input
          id="authentic-action-1"
          placeholder="One way you can be more authentic with your team"
          value={authenticAction1}
          onChange={(e) => setAuthenticAction1(e.target.value)}
          className="text-sm"
        />
      </div>
      
      <div className="space-y-1">
        <Label htmlFor="authentic-action-2" className="text-xs font-medium">Authentic Action 2</Label>
        <Input
          id="authentic-action-2"
          placeholder="Another way you can be more authentic with your team"
          value={authenticAction2}
          onChange={(e) => setAuthenticAction2(e.target.value)}
          className="text-sm"
        />
      </div>
      
      <div className="space-y-1">
        <Label htmlFor="authentic-action-3" className="text-xs font-medium">Authentic Action 3</Label>
        <Input
          id="authentic-action-3"
          placeholder="A third way you can be more authentic with your team"
          value={authenticAction3}
          onChange={(e) => setAuthenticAction3(e.target.value)}
          className="text-sm"
        />
      </div>
    </div>
  )
}

export default VulnerabilityLeadershipForm
